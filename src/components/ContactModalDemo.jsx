import React, { useState } from 'react';
import '../ContactModal.css';

const ContactModalDemo = ({ isOpen, onClose }) => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!email.trim() || !message.trim()) {
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      // –î–µ–º–æ-—Ä–µ–∂–∏–º: —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      console.log('üìß –î–µ–º–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ email:');
      console.log('–û—Ç:', email);
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', message);
      console.log('–ö–æ–º—É: dmitry.nsaa@gmail.com');
      
      setSubmitStatus('success');
      setEmail('');
      setMessage('');
      
      setTimeout(() => {
        onClose();
        setSubmitStatus(null);
      }, 2000);
    } catch (error) {
      console.error('Demo Error:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="contact-modal-overlay" onClick={onClose}>
      <div className="contact-modal" onClick={(e) => e.stopPropagation()}>
        <div className="contact-modal-header">
          <h2>–î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–î–µ–º–æ)</h2>
          <button className="contact-modal-close" onClick={onClose}>
            √ó
          </button>
        </div>
        
        <div style={{ padding: '16px 24px', backgroundColor: '#fef3c7', borderBottom: '1px solid #f59e0b', color: '#92400e' }}>
          <strong>‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º:</strong> –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Formspree –∏–ª–∏ EmailJS.
        </div>
        
        <form onSubmit={handleSubmit} className="contact-form">
          <div className="form-group">
            <label htmlFor="email">Email *</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="–í–∞—à email"
              required
              disabled={isSubmitting}
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ *</label>
            <textarea
              id="message"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
              rows="5"
              required
              disabled={isSubmitting}
            />
          </div>
          
          {submitStatus === 'success' && (
            <div className="submit-success">
              ‚úÖ –î–µ–º–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞! –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console).
            </div>
          )}
          
          {submitStatus === 'error' && (
            <div className="submit-error">
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
            </div>
          )}
          
          <div className="form-actions">
            <button
              type="button"
              className="btn-secondary"
              onClick={onClose}
              disabled={isSubmitting}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="btn-primary"
              disabled={isSubmitting || !email.trim() || !message.trim()}
            >
              {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å (–î–µ–º–æ)'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ContactModalDemo;






